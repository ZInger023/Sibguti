/*
Лабораторная работа 3. Консоль управления моделью Simple Computer. Текстовая часть.
	Цель работы
		Изучить принципы работы терминалов ЭВМ в текстовом режиме. Понять, каким образом кодируется текстовая информация и как с помощью неѐ можно управлять работой терминалов. Разработать библиотеку функций myTerm, включающую базовые функции по управлению текстовым терминалом (очистка экрана, позиционирование курсора, управления цветом). Начать разрабатывать консоль управления Simple Computer (вывести на экран текстовую часть).
	Задание на лабораторную работу
		1. Прочитайте главу 5 практикума по курсу «Организация ЭВМ и систем». Обратите особое внимание на параграфы 5.4 и 5.5. Изучите страницу man для команды infocmp , базы terminfo , функции ioctl .
		2. Откройте текстовый терминал и запустите оболочку bash (оболочка запускается автоматически). Используя команду infocmp, определите (и перепишите их себе) escape последовательности для терминала, выполняющие следующие действия:
			a. очистка экрана и перемещение курсора в левый верхний угол (clear_screen);
			b. перемещение курсора в заданную позицию экрана (cursor_address);
			c. задание цвета последующих выводимых символов (set_a_background);
			d. определение цвета фона для последующих выводимых символов (set_a_foreground);
			e. скрытие и восстановление курсора (cursor_invisible, cursor_visible).
		3. Используя оболочку bash, команду echo –e и скрипт 2 , проверьте работу полученных последовательностей. Символ escape задается как \033 или \E. Например – echo -e "\033[m". Для проверки сформируйте последовательность escape-команд, выполняющую следующие действия:
			a. очищает экран;
			b. выводит в пятой строке, начиная с 10 символа Ваше имя красными буквами на черном фоне;
			c. в шестой строке, начиная с 8 символа Вашу группу зеленым цветом на белом фоне;
			d. перемещает курсор в 10 строку, 1 символ и возвращает настройки цвета в значения «по умолчанию».
		4. Разработать следующие функции:
			a. int mt_clrscr (void) - производит очистку и перемещение курсора в левый верхний угол экрана;
			b. int mt_gotoXY (int, int) - перемещает курсор в указанную позицию. Первый параметр номер строки, второй - номер столбца;
			c. int mt_getscreensize (int * rows, int * cols) - определяет размер экрана терминала (количество строк и столбцов);
			d. int mt_setfgcolor (enum colors) - устанавливает цвет последующих выводимых символов. В качестве параметра передаѐтся константа из созданного Вами перечислимого типа colors , описывающего цвета терминала;
			e. int mt_setbgcolor (enum colors) - устанавливает цвет фона последующих выводимых символов. В качестве параметра передаѐтся константа из созданного Вами перечислимого типа colors , описывающего цвета терминала. Все функции возвращают 0 в случае успешного выполнения и -1 в случае ошибки. В качестве терминала используется стандартный поток вывода.
		5. Оформите разработанные функции как статическую библиотеку myTerm. Подготовьте заголовочный файл для неѐ.
*/

#ifndef TERMINAL_H
#define TERMINAL_H

#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>

enum colors {
	cl_black,
	cl_red,
	cl_green,
	cl_brown,
	cl_blue,
	cl_magenta,
	cl_cyan,
	cl_light_blue,
	cl_default
};

void mt_clrscr ();								// производит очистку и перемещение курсора в левый верхний угол экрана;
int mt_gotoXY (int x, int y);					// перемещает курсор в указанную позицию. Первый параметр номер строки, второй - номер столбца;
int mt_getscreensize (int *rows, int *cols);	// определяет размер экрана терминала (количество строк и столбцов);
int mt_setfgcolor (enum colors color);			// устанавливает цвет последующих выводимых символов. В качестве параметра передаѐтся константа из созданного Вами перечислимого типа colors , описывающего цвета терминала;
int mt_setbgcolor (enum colors color);			// устанавливает цвет фона последующих выводимых символов. В качестве параметра передаѐтся константа из созданного Вами перечислимого типа colors , описывающего цвета терминала.

#endif
